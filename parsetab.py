
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progABS AMPERSAND AND APOSTROPHE ARRAY ASSIGN BEGIN BOOL BOOL_VAL BOOL_VAL COLON COMMA COMMENT DECLARE DIV DOT DUB_DOT ELSE ELSIF END EQUALS FOR FUNC GREATER GTEQ IDENT IF IN IS LEFT_CUR_PAR LEFT_PAR LEFT_SQ_PAR LESS LOOP LSEQ MINUS MOD MUL NOT NOT_EQUALS NULL NUMBER OF OR PLUS POW PROC QUOTE RETURN REVERSE RIGHT_CUR_PAR RIGHT_PAR RIGHT_SQ_PAR SEMICOLON THEN TYPE_BOOL TYPE_FLOAT TYPE_INT USE WHILE WITH XORempty :prog : subprogram\n            | headers subprogramheaders : headers header\n               | headerheader : WITH pkg SEMICOLON\n              | WITH pkg SEMICOLON USE pkg SEMICOLONpkg : pkg DOT IDENT\n           | IDENTsubprogram : procedure\n                  | functionfunction : FUNC IDENT args_opt RETURN type IS declarations BEGIN ret_statements END IDENT SEMICOLONprocedure : PROC IDENT args_opt IS declarations BEGIN statements END IDENT SEMICOLONargs_opt : LEFT_PAR args RIGHT_PAR\n                | emptyargs : args COMMA arg\n            | argarg : IDENT COLON typetype : TYPE_INT\n            | TYPE_FLOAT\n            | TYPE_BOOLdeclarations : declarations declaration\n                    | declarationdeclaration : empty\n                   | function\n                   | procedure\n                   | IDENT COLON type ASSIGN value SEMICOLONvalue : expr\n             | bool_exprexpr : expr PLUS term\n            | expr MINUS term\n            | termterm : term MUL factor\n            | term DIV factor\n            | factorfactor : LEFT_PAR expr RIGHT_PAR\n              | IDENT\n              | NUMBERbool_expr : bool_term AND bool_term\n                 | bool_term OR bool_term\n                 | bool_termbool_term : NOT bool\n                 | boolbool : LEFT_PAR bool_expr RIGHT_PAR\n            | BOOL_VAL\n            | IDENT\n            | rel_operand rel_operator rel_operandrel_operand : NUMBER\n                   | IDENTrel_operator : EQUALS\n                    | NOT_EQUALS\n                    | GREATER\n                    | LESS\n                    | GTEQ\n                    | LSEQstatements : statements statement\n                  | statementstatement : assign\n                 | if\n                 | loopret_statements : ret_statements ret_statement\n                      | ret_statementret_statement : statement\n                     | RETURN value SEMICOLONassign : IDENT ASSIGN value SEMICOLONif : IF bool_expr THEN ret_statements elsifs else END IF SEMICOLONelsifs : elsifs elsif\n              | emptyelsif : ELSIF bool_expr THEN ret_statementselse : ELSE ret_statements\n            | emptyloop : loop_body\n            | for_range loop_body\n            | while loop_bodyloop_body : LOOP statements END LOOP SEMICOLONfor_range : FOR IDENT IN expr DUB_DOT exprwhile : WHILE bool_expr'
    
_lr_action_items = {'PROC':([0,3,6,11,20,22,30,31,32,33,34,45,48,49,64,112,119,151,],[7,7,-5,-4,-6,7,7,-23,-24,-25,-26,-22,7,-7,7,-27,-13,-12,]),'FUNC':([0,3,6,11,20,22,30,31,32,33,34,45,48,49,64,112,119,151,],[8,8,-5,-4,-6,8,8,-23,-24,-25,-26,-22,8,-7,8,-27,-13,-12,]),'WITH':([0,3,6,11,20,49,],[9,9,-5,-4,-6,-7,]),'$end':([1,2,4,5,10,119,151,],[0,-2,-10,-11,-3,-13,-12,]),'IDENT':([7,8,9,17,21,22,27,30,31,32,33,34,36,44,45,48,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,71,73,78,79,80,83,90,94,95,96,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,116,118,119,120,129,132,133,141,142,143,147,149,151,153,156,157,158,],[12,13,15,25,28,29,15,29,-23,-24,-25,-26,25,51,-22,29,51,-57,-58,-59,-60,75,-72,51,81,75,29,84,84,93,-56,75,75,-73,-74,51,51,84,51,75,75,125,-50,-51,-52,-53,-54,-55,127,84,51,-62,-63,-27,127,127,127,127,-65,-13,51,127,144,-61,-75,127,-64,51,75,-12,51,51,-66,51,]),'LEFT_PAR':([12,13,57,63,65,66,71,73,90,95,96,107,108,113,114,115,116,129,142,149,],[17,17,73,73,90,90,73,73,90,73,73,129,90,129,129,129,129,129,129,73,]),'IS':([12,16,18,35,38,39,40,41,],[-1,22,-15,-14,48,-19,-20,-21,]),'RETURN':([13,18,19,35,54,55,56,58,78,79,83,94,109,110,111,118,120,133,141,143,147,153,156,157,158,],[-1,-15,26,-14,-58,-59,-60,-72,-73,-74,108,108,108,-62,-63,-65,108,-61,-75,-64,108,108,108,-66,108,]),'SEMICOLON':([14,15,28,42,70,72,74,75,77,84,85,86,87,88,89,91,92,93,97,121,122,123,124,125,126,127,130,131,134,135,136,137,138,144,155,],[20,-9,-8,49,-41,-43,-45,-46,-48,-37,112,-28,-29,-32,-35,-38,118,119,-42,-39,-40,-44,-47,-49,141,-37,-38,143,-30,-31,-33,-34,-36,151,157,]),'DOT':([14,15,28,42,],[21,-9,-8,21,]),'USE':([20,],[27,]),'BEGIN':([22,30,31,32,33,34,45,48,64,112,119,151,],[-1,44,-23,-24,-25,-26,-22,-1,83,-27,-13,-12,]),'RIGHT_PAR':([23,24,39,40,41,46,47,70,72,74,75,77,84,88,89,91,97,98,117,121,122,123,124,125,127,130,134,135,136,137,138,],[35,-17,-19,-20,-21,-16,-18,-41,-43,-45,-46,-48,-37,-32,-35,-38,-42,123,138,-39,-40,-44,-47,-49,-37,-38,-30,-31,-33,-34,-36,]),'COMMA':([23,24,39,40,41,46,47,],[36,-17,-19,-20,-21,-16,-18,]),'COLON':([25,29,],[37,43,]),'TYPE_INT':([26,37,43,],[39,39,39,]),'TYPE_FLOAT':([26,37,43,],[40,40,40,]),'TYPE_BOOL':([26,37,43,],[41,41,41,]),'ASSIGN':([39,40,41,50,51,],[-19,-20,-21,65,66,]),'IF':([44,52,53,54,55,56,58,61,68,78,79,80,83,94,109,110,111,118,120,133,141,143,147,152,153,156,157,158,],[57,57,-57,-58,-59,-60,-72,57,-56,-73,-74,57,57,57,57,-62,-63,-65,57,-61,-75,-64,57,155,57,57,-66,57,]),'LOOP':([44,52,53,54,55,56,58,59,60,61,68,70,72,74,75,77,78,79,80,82,83,88,89,94,97,106,109,110,111,118,120,121,122,123,124,125,127,130,133,134,135,136,137,138,141,143,147,150,153,156,157,158,],[61,61,-57,-58,-59,-60,-72,61,61,61,-56,-41,-43,-45,-46,-48,-73,-74,61,-77,61,-32,-35,61,-42,126,61,-62,-63,-65,61,-39,-40,-44,-47,-49,-37,-38,-61,-30,-31,-33,-34,-36,-75,-64,61,-76,61,61,-66,61,]),'FOR':([44,52,53,54,55,56,58,61,68,78,79,80,83,94,109,110,111,118,120,133,141,143,147,153,156,157,158,],[62,62,-57,-58,-59,-60,-72,62,-56,-73,-74,62,62,62,62,-62,-63,-65,62,-61,-75,-64,62,62,62,-66,62,]),'WHILE':([44,52,53,54,55,56,58,61,68,78,79,80,83,94,109,110,111,118,120,133,141,143,147,153,156,157,158,],[63,63,-57,-58,-59,-60,-72,63,-56,-73,-74,63,63,63,63,-62,-63,-65,63,-61,-75,-64,63,63,63,-66,63,]),'END':([52,53,54,55,56,58,68,78,79,80,109,110,111,118,120,133,139,140,141,143,145,146,148,153,157,158,],[67,-57,-58,-59,-60,-72,-56,-73,-74,106,132,-62,-63,-65,-1,-61,-1,-68,-75,-64,152,-67,-71,-70,-66,-69,]),'ELSE':([54,55,56,58,78,79,110,111,118,120,133,139,140,141,143,146,157,158,],[-58,-59,-60,-72,-73,-74,-62,-63,-65,-1,-61,147,-68,-75,-64,-67,-66,-69,]),'ELSIF':([54,55,56,58,78,79,110,111,118,120,133,139,140,141,143,146,157,158,],[-58,-59,-60,-72,-73,-74,-62,-63,-65,-1,-61,149,-68,-75,-64,-67,-66,-69,]),'NOT':([57,63,65,66,73,90,95,96,108,149,],[71,71,71,71,71,71,71,71,71,71,]),'BOOL_VAL':([57,63,65,66,71,73,90,95,96,108,149,],[74,74,74,74,74,74,74,74,74,74,74,]),'NUMBER':([57,63,65,66,71,73,90,95,96,99,100,101,102,103,104,105,107,108,113,114,115,116,129,142,149,],[77,77,91,91,77,77,91,77,77,77,-50,-51,-52,-53,-54,-55,130,91,130,130,130,130,130,130,77,]),'THEN':([69,70,72,74,75,77,97,121,122,123,124,125,154,],[94,-41,-43,-45,-46,-48,-42,-39,-40,-44,-47,-49,156,]),'AND':([70,72,74,75,77,84,97,123,124,125,],[95,-43,-45,-46,-48,-46,-42,-44,-47,-49,]),'OR':([70,72,74,75,77,84,97,123,124,125,],[96,-43,-45,-46,-48,-46,-42,-44,-47,-49,]),'EQUALS':([75,76,77,84,91,],[-49,100,-48,-49,-48,]),'NOT_EQUALS':([75,76,77,84,91,],[-49,101,-48,-49,-48,]),'GREATER':([75,76,77,84,91,],[-49,102,-48,-49,-48,]),'LESS':([75,76,77,84,91,],[-49,103,-48,-49,-48,]),'GTEQ':([75,76,77,84,91,],[-49,104,-48,-49,-48,]),'LSEQ':([75,76,77,84,91,],[-49,105,-48,-49,-48,]),'IN':([81,],[107,]),'MUL':([84,88,89,91,127,130,134,135,136,137,138,],[-37,115,-35,-38,-37,-38,115,115,-33,-34,-36,]),'DIV':([84,88,89,91,127,130,134,135,136,137,138,],[-37,116,-35,-38,-37,-38,116,116,-33,-34,-36,]),'PLUS':([84,86,88,89,91,117,127,128,130,134,135,136,137,138,150,],[-37,113,-32,-35,-38,113,-37,113,-38,-30,-31,-33,-34,-36,113,]),'MINUS':([84,86,88,89,91,117,127,128,130,134,135,136,137,138,150,],[-37,114,-32,-35,-38,114,-37,114,-38,-30,-31,-33,-34,-36,114,]),'DUB_DOT':([88,89,127,128,130,134,135,136,137,138,],[-32,-35,-37,142,-38,-30,-31,-33,-34,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'subprogram':([0,3,],[2,10,]),'headers':([0,],[3,]),'procedure':([0,3,22,30,48,64,],[4,4,34,34,34,34,]),'function':([0,3,22,30,48,64,],[5,5,33,33,33,33,]),'header':([0,3,],[6,11,]),'pkg':([9,27,],[14,42,]),'args_opt':([12,13,],[16,19,]),'empty':([12,13,22,30,48,64,120,139,],[18,18,32,32,32,32,140,148,]),'args':([17,],[23,]),'arg':([17,36,],[24,46,]),'declarations':([22,48,],[30,64,]),'declaration':([22,30,48,64,],[31,45,31,45,]),'type':([26,37,43,],[38,47,50,]),'statements':([44,61,],[52,80,]),'statement':([44,52,61,80,83,94,109,120,147,153,156,158,],[53,68,53,68,111,111,111,111,111,111,111,111,]),'assign':([44,52,61,80,83,94,109,120,147,153,156,158,],[54,54,54,54,54,54,54,54,54,54,54,54,]),'if':([44,52,61,80,83,94,109,120,147,153,156,158,],[55,55,55,55,55,55,55,55,55,55,55,55,]),'loop':([44,52,61,80,83,94,109,120,147,153,156,158,],[56,56,56,56,56,56,56,56,56,56,56,56,]),'loop_body':([44,52,59,60,61,80,83,94,109,120,147,153,156,158,],[58,58,78,79,58,58,58,58,58,58,58,58,58,58,]),'for_range':([44,52,61,80,83,94,109,120,147,153,156,158,],[59,59,59,59,59,59,59,59,59,59,59,59,]),'while':([44,52,61,80,83,94,109,120,147,153,156,158,],[60,60,60,60,60,60,60,60,60,60,60,60,]),'bool_expr':([57,63,65,66,73,90,108,149,],[69,82,87,87,98,98,87,154,]),'bool_term':([57,63,65,66,73,90,95,96,108,149,],[70,70,70,70,70,70,121,122,70,70,]),'bool':([57,63,65,66,71,73,90,95,96,108,149,],[72,72,72,72,97,72,72,72,72,72,72,]),'rel_operand':([57,63,65,66,71,73,90,95,96,99,108,149,],[76,76,76,76,76,76,76,76,76,124,76,76,]),'value':([65,66,108,],[85,92,131,]),'expr':([65,66,90,107,108,129,142,],[86,86,117,128,86,117,150,]),'term':([65,66,90,107,108,113,114,129,142,],[88,88,88,88,88,134,135,88,88,]),'factor':([65,66,90,107,108,113,114,115,116,129,142,],[89,89,89,89,89,89,89,136,137,89,89,]),'rel_operator':([76,],[99,]),'ret_statements':([83,94,147,156,],[109,120,153,158,]),'ret_statement':([83,94,109,120,147,153,156,158,],[110,110,133,133,110,133,110,133,]),'elsifs':([120,],[139,]),'else':([139,],[145,]),'elsif':([139,],[146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',7),
  ('prog -> subprogram','prog',1,'p_prog','parser.py',12),
  ('prog -> headers subprogram','prog',2,'p_prog','parser.py',13),
  ('headers -> headers header','headers',2,'p_headers','parser.py',20),
  ('headers -> header','headers',1,'p_headers','parser.py',21),
  ('header -> WITH pkg SEMICOLON','header',3,'p_header','parser.py',28),
  ('header -> WITH pkg SEMICOLON USE pkg SEMICOLON','header',6,'p_header','parser.py',29),
  ('pkg -> pkg DOT IDENT','pkg',3,'p_pkg','parser.py',43),
  ('pkg -> IDENT','pkg',1,'p_pkg','parser.py',44),
  ('subprogram -> procedure','subprogram',1,'p_subprogram','parser.py',56),
  ('subprogram -> function','subprogram',1,'p_subprogram','parser.py',57),
  ('function -> FUNC IDENT args_opt RETURN type IS declarations BEGIN ret_statements END IDENT SEMICOLON','function',12,'p_function','parser.py',61),
  ('procedure -> PROC IDENT args_opt IS declarations BEGIN statements END IDENT SEMICOLON','procedure',10,'p_procedure','parser.py',75),
  ('args_opt -> LEFT_PAR args RIGHT_PAR','args_opt',3,'p_args_opt','parser.py',87),
  ('args_opt -> empty','args_opt',1,'p_args_opt','parser.py',88),
  ('args -> args COMMA arg','args',3,'p_args','parser.py',96),
  ('args -> arg','args',1,'p_args','parser.py',97),
  ('arg -> IDENT COLON type','arg',3,'p_arg','parser.py',104),
  ('type -> TYPE_INT','type',1,'p_type','parser.py',108),
  ('type -> TYPE_FLOAT','type',1,'p_type','parser.py',109),
  ('type -> TYPE_BOOL','type',1,'p_type','parser.py',110),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',119),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',120),
  ('declaration -> empty','declaration',1,'p_declaration','parser.py',127),
  ('declaration -> function','declaration',1,'p_declaration','parser.py',128),
  ('declaration -> procedure','declaration',1,'p_declaration','parser.py',129),
  ('declaration -> IDENT COLON type ASSIGN value SEMICOLON','declaration',6,'p_declaration','parser.py',130),
  ('value -> expr','value',1,'p_value','parser.py',140),
  ('value -> bool_expr','value',1,'p_value','parser.py',141),
  ('expr -> expr PLUS term','expr',3,'p_expr','parser.py',145),
  ('expr -> expr MINUS term','expr',3,'p_expr','parser.py',146),
  ('expr -> term','expr',1,'p_expr','parser.py',147),
  ('term -> term MUL factor','term',3,'p_term','parser.py',156),
  ('term -> term DIV factor','term',3,'p_term','parser.py',157),
  ('term -> factor','term',1,'p_term','parser.py',158),
  ('factor -> LEFT_PAR expr RIGHT_PAR','factor',3,'p_factor','parser.py',167),
  ('factor -> IDENT','factor',1,'p_factor','parser.py',168),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',169),
  ('bool_expr -> bool_term AND bool_term','bool_expr',3,'p_bool_expr','parser.py',179),
  ('bool_expr -> bool_term OR bool_term','bool_expr',3,'p_bool_expr','parser.py',180),
  ('bool_expr -> bool_term','bool_expr',1,'p_bool_expr','parser.py',181),
  ('bool_term -> NOT bool','bool_term',2,'p_bool_term','parser.py',188),
  ('bool_term -> bool','bool_term',1,'p_bool_term','parser.py',189),
  ('bool -> LEFT_PAR bool_expr RIGHT_PAR','bool',3,'p_bool','parser.py',196),
  ('bool -> BOOL_VAL','bool',1,'p_bool','parser.py',197),
  ('bool -> IDENT','bool',1,'p_bool','parser.py',198),
  ('bool -> rel_operand rel_operator rel_operand','bool',3,'p_bool','parser.py',199),
  ('rel_operand -> NUMBER','rel_operand',1,'p_rel_operand','parser.py',211),
  ('rel_operand -> IDENT','rel_operand',1,'p_rel_operand','parser.py',212),
  ('rel_operator -> EQUALS','rel_operator',1,'p_rel_operator','parser.py',219),
  ('rel_operator -> NOT_EQUALS','rel_operator',1,'p_rel_operator','parser.py',220),
  ('rel_operator -> GREATER','rel_operator',1,'p_rel_operator','parser.py',221),
  ('rel_operator -> LESS','rel_operator',1,'p_rel_operator','parser.py',222),
  ('rel_operator -> GTEQ','rel_operator',1,'p_rel_operator','parser.py',223),
  ('rel_operator -> LSEQ','rel_operator',1,'p_rel_operator','parser.py',224),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',229),
  ('statements -> statement','statements',1,'p_statements','parser.py',230),
  ('statement -> assign','statement',1,'p_statement','parser.py',238),
  ('statement -> if','statement',1,'p_statement','parser.py',239),
  ('statement -> loop','statement',1,'p_statement','parser.py',240),
  ('ret_statements -> ret_statements ret_statement','ret_statements',2,'p_ret_statements','parser.py',244),
  ('ret_statements -> ret_statement','ret_statements',1,'p_ret_statements','parser.py',245),
  ('ret_statement -> statement','ret_statement',1,'p_ret_statement','parser.py',253),
  ('ret_statement -> RETURN value SEMICOLON','ret_statement',3,'p_ret_statement','parser.py',254),
  ('assign -> IDENT ASSIGN value SEMICOLON','assign',4,'p_assign','parser.py',262),
  ('if -> IF bool_expr THEN ret_statements elsifs else END IF SEMICOLON','if',9,'p_if','parser.py',268),
  ('elsifs -> elsifs elsif','elsifs',2,'p_elsifs','parser.py',276),
  ('elsifs -> empty','elsifs',1,'p_elsifs','parser.py',277),
  ('elsif -> ELSIF bool_expr THEN ret_statements','elsif',4,'p_elsif','parser.py',284),
  ('else -> ELSE ret_statements','else',2,'p_else','parser.py',290),
  ('else -> empty','else',1,'p_else','parser.py',291),
  ('loop -> loop_body','loop',1,'p_loop','parser.py',298),
  ('loop -> for_range loop_body','loop',2,'p_loop','parser.py',299),
  ('loop -> while loop_body','loop',2,'p_loop','parser.py',300),
  ('loop_body -> LOOP statements END LOOP SEMICOLON','loop_body',5,'p_loop_body','parser.py',307),
  ('for_range -> FOR IDENT IN expr DUB_DOT expr','for_range',6,'p_for_range','parser.py',314),
  ('while -> WHILE bool_expr','while',2,'p_while','parser.py',321),
]
