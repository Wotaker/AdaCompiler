
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progABS AMPERSAND AND APOSTROPHE ARRAY ASSIGN BEGIN BOOL BOOL_F BOOL_T COLON COMMA COMMENT DECLARE DIV DOT DUB_DOT ELSE ELSIF END EQUALS FOR FUNC GREATER GTEQ IDENT IF IN IS LEFT_CUR_PAR LEFT_PAR LEFT_SQ_PAR LESS LOOP LSEQ MINUS MOD MUL NOT NOT_EQUALS NULL NUMBER OF OR PLUS POW PROC QUOTE RETURN REVERSE RIGHT_CUR_PAR RIGHT_PAR RIGHT_SQ_PAR SEMICOLON THEN TYPE TYPE_BOOL TYPE_FLOAT TYPE_INT USE WHILE WITH XORempty :prog : subprogram\n            | headers subprogramheaders : headers header\n               | headerheader : WITH pkg SEMICOLON\n              | WITH pkg SEMICOLON USE pkg SEMICOLONpkg : pkg DOT IDENT\n           | IDENTsubprogram : procedure\n                  | functionfunction : IDENTprocedure : PROC IDENT args_opt IS declarations BEGIN statements END IDENT SEMICOLONargs_opt : LEFT_PAR args RIGHT_PAR\n                | emptyargs : args COMMA arg\n            | argarg : IDENT COLON typetype : TYPE_INT\n            | TYPE_FLOAT\n            | TYPE_BOOLdeclarations : declarations declaration\n                    | declarationdeclaration : IDENT COLON type ASSIGN value SEMICOLONvalue : expr\n             | bool_exprexpr : expr PLUS term\n            | expr MINUS term\n            | termterm : term MUL factor\n            | term DIV factor\n            | factorfactor : LEFT_PAR expr RIGHT_PAR\n              | IDENT\n              | NUMBERbool_expr : bools AND bools\n                 | bools OR bools\n                 | boolsbools : LEFT_PAR bool_expr RIGHT_PAR\n             | LEFT_PAR bool RIGHT_PAR\n             | bool\n             | NOT boolbool : BOOL_T\n            | BOOL_Fstatements : statements statement\n                  | statementstatement : assign\n                 | if\n                 | loopassign : IDENT ASSIGN value SEMICOLONif : IF bool_expr THEN statements elsifs else END IF SEMICOLONelsifs : elsifs elsif\n              | emptyelsif : ELSIF bool_expr THEN statementselse : ELSE statements\n            | emptyloop : WHILE bool_expr loop_body\n            | FOR IDENT IN expr DUB_DOT expr loop_body\n            | FOR IDENT OF IDENT loop_bodyloop_body : LOOP statements END LOOP SEMICOLON'
    
_lr_action_items = {'PROC':([0,3,6,11,18,41,],[7,7,-5,-4,-6,-7,]),'IDENT':([0,3,6,7,9,11,16,18,19,20,24,27,28,30,34,35,41,44,45,46,47,48,51,52,53,54,55,71,75,81,82,83,84,85,86,87,88,89,91,93,98,100,110,111,114,120,122,123,125,126,127,],[8,8,-5,12,14,-4,23,-6,25,26,14,26,-23,23,43,-22,-7,43,-46,-47,-48,-49,64,65,65,74,-45,65,43,-57,43,65,101,-24,65,65,65,65,-50,43,43,65,65,-59,43,43,-60,-58,43,-51,43,]),'WITH':([0,3,6,11,18,41,],[9,9,-5,-4,-6,-7,]),'$end':([1,2,4,5,8,10,92,],[0,-2,-10,-11,-12,-3,-13,]),'LEFT_PAR':([12,49,50,52,53,58,71,76,77,83,86,87,88,89,100,110,116,],[16,58,58,71,71,58,71,58,58,100,100,100,100,100,100,100,58,]),'IS':([12,15,17,29,],[-1,20,-15,-14,]),'SEMICOLON':([13,14,25,32,57,59,61,62,65,66,67,68,69,70,72,73,74,80,94,95,96,97,102,103,104,105,106,117,124,],[18,-9,-8,41,-38,-41,-43,-44,-34,85,-25,-26,-29,-32,-35,91,92,-42,-36,-37,-39,-40,-27,-28,-30,-31,-33,122,126,]),'DOT':([13,14,25,32,],[19,-9,-8,19,]),'USE':([18,],[24,]),'RIGHT_PAR':([21,22,36,37,38,39,40,57,59,61,62,65,69,70,72,78,79,80,90,94,95,96,97,102,103,104,105,106,],[29,-17,-16,-18,-19,-20,-21,-38,-41,-43,-44,-34,-29,-32,-35,96,97,-42,106,-36,-37,-39,-40,-27,-28,-30,-31,-33,]),'COMMA':([21,22,36,37,38,39,40,],[30,-17,-16,-18,-19,-20,-21,]),'COLON':([23,26,],[31,33,]),'BEGIN':([27,28,35,85,],[34,-23,-22,-24,]),'TYPE_INT':([31,33,],[38,38,]),'TYPE_FLOAT':([31,33,],[39,39,]),'TYPE_BOOL':([31,33,],[40,40,]),'IF':([34,44,45,46,47,48,55,75,81,82,91,93,98,111,114,119,120,122,123,125,126,127,],[49,49,-46,-47,-48,-49,-45,49,-57,49,-50,49,49,-59,49,124,49,-60,-58,49,-51,49,]),'WHILE':([34,44,45,46,47,48,55,75,81,82,91,93,98,111,114,120,122,123,125,126,127,],[50,50,-46,-47,-48,-49,-45,50,-57,50,-50,50,50,-59,50,50,-60,-58,50,-51,50,]),'FOR':([34,44,45,46,47,48,55,75,81,82,91,93,98,111,114,120,122,123,125,126,127,],[51,51,-46,-47,-48,-49,-45,51,-57,51,-50,51,51,-59,51,51,-60,-58,51,-51,51,]),'ASSIGN':([38,39,40,42,43,],[-19,-20,-21,52,53,]),'END':([44,45,46,47,48,55,81,91,93,98,107,108,111,112,113,115,120,122,123,126,127,],[54,-46,-47,-48,-49,-45,-57,-50,-1,109,-1,-53,-59,119,-52,-56,-55,-60,-58,-51,-54,]),'ELSE':([45,46,47,48,55,81,91,93,107,108,111,113,122,123,126,127,],[-46,-47,-48,-49,-45,-57,-50,-1,114,-53,-59,-52,-60,-58,-51,-54,]),'ELSIF':([45,46,47,48,55,81,91,93,107,108,111,113,122,123,126,127,],[-46,-47,-48,-49,-45,-57,-50,-1,116,-53,-59,-52,-60,-58,-51,-54,]),'NOT':([49,50,52,53,58,71,76,77,116,],[60,60,60,60,60,60,60,60,60,]),'BOOL_T':([49,50,52,53,58,60,71,76,77,116,],[61,61,61,61,61,61,61,61,61,61,]),'BOOL_F':([49,50,52,53,58,60,71,76,77,116,],[62,62,62,62,62,62,62,62,62,62,]),'NUMBER':([52,53,71,83,86,87,88,89,100,110,],[72,72,72,72,72,72,72,72,72,72,]),'THEN':([56,57,59,61,62,80,94,95,96,97,121,],[75,-38,-41,-43,-44,-42,-36,-37,-39,-40,125,]),'AND':([57,59,61,62,79,80,96,97,],[76,-41,-43,-44,-41,-42,-39,-40,]),'OR':([57,59,61,62,79,80,96,97,],[77,-41,-43,-44,-41,-42,-39,-40,]),'LOOP':([57,59,61,62,63,65,69,70,72,80,94,95,96,97,101,102,103,104,105,106,109,118,],[-38,-41,-43,-44,82,-34,-29,-32,-35,-42,-36,-37,-39,-40,82,-27,-28,-30,-31,-33,117,82,]),'IN':([64,],[83,]),'OF':([64,],[84,]),'MUL':([65,69,70,72,102,103,104,105,106,],[-34,88,-32,-35,88,88,-30,-31,-33,]),'DIV':([65,69,70,72,102,103,104,105,106,],[-34,89,-32,-35,89,89,-30,-31,-33,]),'PLUS':([65,67,69,70,72,90,99,102,103,104,105,106,118,],[-34,86,-29,-32,-35,86,86,-27,-28,-30,-31,-33,86,]),'MINUS':([65,67,69,70,72,90,99,102,103,104,105,106,118,],[-34,87,-29,-32,-35,87,87,-27,-28,-30,-31,-33,87,]),'DUB_DOT':([65,69,70,72,99,102,103,104,105,106,],[-34,-29,-32,-35,110,-27,-28,-30,-31,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'subprogram':([0,3,],[2,10,]),'headers':([0,],[3,]),'procedure':([0,3,],[4,4,]),'function':([0,3,],[5,5,]),'header':([0,3,],[6,11,]),'pkg':([9,24,],[13,32,]),'args_opt':([12,],[15,]),'empty':([12,93,107,],[17,108,115,]),'args':([16,],[21,]),'arg':([16,30,],[22,36,]),'declarations':([20,],[27,]),'declaration':([20,27,],[28,35,]),'type':([31,33,],[37,42,]),'statements':([34,75,82,114,125,],[44,93,98,120,127,]),'statement':([34,44,75,82,93,98,114,120,125,127,],[45,55,45,45,55,55,45,55,45,55,]),'assign':([34,44,75,82,93,98,114,120,125,127,],[46,46,46,46,46,46,46,46,46,46,]),'if':([34,44,75,82,93,98,114,120,125,127,],[47,47,47,47,47,47,47,47,47,47,]),'loop':([34,44,75,82,93,98,114,120,125,127,],[48,48,48,48,48,48,48,48,48,48,]),'bool_expr':([49,50,52,53,58,71,116,],[56,63,68,68,78,78,121,]),'bools':([49,50,52,53,58,71,76,77,116,],[57,57,57,57,57,57,94,95,57,]),'bool':([49,50,52,53,58,60,71,76,77,116,],[59,59,59,59,79,80,79,59,59,59,]),'value':([52,53,],[66,73,]),'expr':([52,53,71,83,100,110,],[67,67,90,99,90,118,]),'term':([52,53,71,83,86,87,100,110,],[69,69,69,69,102,103,69,69,]),'factor':([52,53,71,83,86,87,88,89,100,110,],[70,70,70,70,70,70,104,105,70,70,]),'loop_body':([63,101,118,],[81,111,123,]),'elsifs':([93,],[107,]),'else':([107,],[112,]),'elsif':([107,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',7),
  ('prog -> subprogram','prog',1,'p_prog','parser.py',12),
  ('prog -> headers subprogram','prog',2,'p_prog','parser.py',13),
  ('headers -> headers header','headers',2,'p_headers','parser.py',20),
  ('headers -> header','headers',1,'p_headers','parser.py',21),
  ('header -> WITH pkg SEMICOLON','header',3,'p_header','parser.py',28),
  ('header -> WITH pkg SEMICOLON USE pkg SEMICOLON','header',6,'p_header','parser.py',29),
  ('pkg -> pkg DOT IDENT','pkg',3,'p_pkg','parser.py',43),
  ('pkg -> IDENT','pkg',1,'p_pkg','parser.py',44),
  ('subprogram -> procedure','subprogram',1,'p_subprogram','parser.py',56),
  ('subprogram -> function','subprogram',1,'p_subprogram','parser.py',57),
  ('function -> IDENT','function',1,'p_function','parser.py',61),
  ('procedure -> PROC IDENT args_opt IS declarations BEGIN statements END IDENT SEMICOLON','procedure',10,'p_procedure','parser.py',66),
  ('args_opt -> LEFT_PAR args RIGHT_PAR','args_opt',3,'p_args_opt','parser.py',78),
  ('args_opt -> empty','args_opt',1,'p_args_opt','parser.py',79),
  ('args -> args COMMA arg','args',3,'p_args','parser.py',87),
  ('args -> arg','args',1,'p_args','parser.py',88),
  ('arg -> IDENT COLON type','arg',3,'p_arg','parser.py',95),
  ('type -> TYPE_INT','type',1,'p_type','parser.py',99),
  ('type -> TYPE_FLOAT','type',1,'p_type','parser.py',100),
  ('type -> TYPE_BOOL','type',1,'p_type','parser.py',101),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',110),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',111),
  ('declaration -> IDENT COLON type ASSIGN value SEMICOLON','declaration',6,'p_declaration','parser.py',118),
  ('value -> expr','value',1,'p_value','parser.py',126),
  ('value -> bool_expr','value',1,'p_value','parser.py',127),
  ('expr -> expr PLUS term','expr',3,'p_expr','parser.py',132),
  ('expr -> expr MINUS term','expr',3,'p_expr','parser.py',133),
  ('expr -> term','expr',1,'p_expr','parser.py',134),
  ('term -> term MUL factor','term',3,'p_term','parser.py',143),
  ('term -> term DIV factor','term',3,'p_term','parser.py',144),
  ('term -> factor','term',1,'p_term','parser.py',145),
  ('factor -> LEFT_PAR expr RIGHT_PAR','factor',3,'p_factor','parser.py',154),
  ('factor -> IDENT','factor',1,'p_factor','parser.py',155),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',156),
  ('bool_expr -> bools AND bools','bool_expr',3,'p_bool_expr','parser.py',166),
  ('bool_expr -> bools OR bools','bool_expr',3,'p_bool_expr','parser.py',167),
  ('bool_expr -> bools','bool_expr',1,'p_bool_expr','parser.py',168),
  ('bools -> LEFT_PAR bool_expr RIGHT_PAR','bools',3,'p_bools','parser.py',175),
  ('bools -> LEFT_PAR bool RIGHT_PAR','bools',3,'p_bools','parser.py',176),
  ('bools -> bool','bools',1,'p_bools','parser.py',177),
  ('bools -> NOT bool','bools',2,'p_bools','parser.py',178),
  ('bool -> BOOL_T','bool',1,'p_bool','parser.py',189),
  ('bool -> BOOL_F','bool',1,'p_bool','parser.py',190),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',195),
  ('statements -> statement','statements',1,'p_statements','parser.py',196),
  ('statement -> assign','statement',1,'p_statement','parser.py',204),
  ('statement -> if','statement',1,'p_statement','parser.py',205),
  ('statement -> loop','statement',1,'p_statement','parser.py',206),
  ('assign -> IDENT ASSIGN value SEMICOLON','assign',4,'p_assign','parser.py',210),
  ('if -> IF bool_expr THEN statements elsifs else END IF SEMICOLON','if',9,'p_if','parser.py',216),
  ('elsifs -> elsifs elsif','elsifs',2,'p_eslifs','parser.py',224),
  ('elsifs -> empty','elsifs',1,'p_eslifs','parser.py',225),
  ('elsif -> ELSIF bool_expr THEN statements','elsif',4,'p_elsif','parser.py',232),
  ('else -> ELSE statements','else',2,'p_else','parser.py',238),
  ('else -> empty','else',1,'p_else','parser.py',239),
  ('loop -> WHILE bool_expr loop_body','loop',3,'p_loop','parser.py',246),
  ('loop -> FOR IDENT IN expr DUB_DOT expr loop_body','loop',7,'p_loop','parser.py',247),
  ('loop -> FOR IDENT OF IDENT loop_body','loop',5,'p_loop','parser.py',248),
  ('loop_body -> LOOP statements END LOOP SEMICOLON','loop_body',5,'p_loop_body','parser.py',265),
]
