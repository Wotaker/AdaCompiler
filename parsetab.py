
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progABS AMPERSAND AND APOSTROPHE ARRAY ASSIGN BEGIN BOOL BOOL_VAL BOOL_VAL COLON COMMA COMMENT DECLARE DIV DOT DUB_DOT ELSE ELSIF END EQUALS FOR FUNC GREATER GTEQ IDENT IF IN IS LEFT_CUR_PAR LEFT_PAR LEFT_SQ_PAR LESS LOOP LSEQ MINUS MOD MUL NOT NOT_EQUALS NULL NUMBER OF OR PLUS POW PROC QUOTE RETURN REVERSE RIGHT_CUR_PAR RIGHT_PAR RIGHT_SQ_PAR SEMICOLON THEN TYPE TYPE_BOOL TYPE_FLOAT TYPE_INT USE WHILE WITH XORempty :prog : subprogram\n            | headers subprogramheaders : headers header\n               | headerheader : WITH pkg SEMICOLON\n              | WITH pkg SEMICOLON USE pkg SEMICOLONpkg : pkg DOT IDENT\n           | IDENTsubprogram : procedure\n                  | functionfunction : IDENTprocedure : PROC IDENT args_opt IS declarations BEGIN statements END IDENT SEMICOLONargs_opt : LEFT_PAR args RIGHT_PAR\n                | emptyargs : args COMMA arg\n            | argarg : IDENT COLON typetype : TYPE_INT\n            | TYPE_FLOAT\n            | TYPE_BOOLdeclarations : declarations declaration\n                    | declarationdeclaration : IDENT COLON type ASSIGN value SEMICOLONvalue : expr\n             | bool_exprexpr : expr PLUS term\n            | expr MINUS term\n            | termterm : term MUL factor\n            | term DIV factor\n            | factorfactor : LEFT_PAR expr RIGHT_PAR\n              | IDENT\n              | NUMBERbool_expr : bool_term AND bool_term\n                 | bool_term OR bool_term\n                 | bool_termbool_term : NOT bool\n                 | boolbool : LEFT_PAR bool_expr RIGHT_PAR\n            | BOOL_VAL\n            | IDENTstatements : statements statement\n                  | statementstatement : assign\n                 | if\n                 | loopassign : IDENT ASSIGN value SEMICOLONif : IF bool_expr THEN statements elsifs else END IF SEMICOLONelsifs : elsifs elsif\n              | emptyelsif : ELSIF bool_expr THEN statementselse : ELSE statements\n            | emptyloop : loop_body\n            | for_range loop_body\n            | while loop_bodyloop_body : LOOP statements END LOOP SEMICOLONfor_range : FOR IDENT IN expr DUB_DOT exprwhile : WHILE bool_expr'
    
_lr_action_items = {'PROC':([0,3,6,11,18,41,],[7,7,-5,-4,-6,-7,]),'IDENT':([0,3,6,7,9,11,16,18,19,20,24,27,28,30,34,35,41,44,45,46,47,48,49,50,53,54,55,56,57,58,59,62,64,67,68,69,78,82,83,84,88,89,90,91,92,93,95,97,104,112,113,116,118,121,124,125,126,],[8,8,-5,12,14,-4,23,-6,25,26,14,26,-23,23,43,-22,-7,43,-45,-46,-47,-48,66,-56,43,70,66,72,72,81,-44,66,66,-57,-58,43,72,43,66,66,102,-24,102,102,102,102,-49,43,102,-59,102,43,66,43,43,-50,43,]),'WITH':([0,3,6,11,18,41,],[9,9,-5,-4,-6,-7,]),'$end':([1,2,4,5,8,10,96,],[0,-2,-10,-11,-12,-3,-13,]),'LEFT_PAR':([12,49,55,56,57,62,64,78,83,84,88,90,91,92,93,104,113,118,],[16,64,64,78,78,64,64,78,64,64,104,104,104,104,104,104,104,64,]),'IS':([12,15,17,29,],[-1,20,-15,-14,]),'SEMICOLON':([13,14,25,32,61,63,65,66,72,73,74,75,76,77,79,80,81,85,98,99,100,101,102,105,106,107,108,109,123,],[18,-9,-8,41,-38,-40,-42,-43,-34,89,-25,-26,-29,-32,-35,95,96,-39,-36,-37,-41,112,-34,-27,-28,-30,-31,-33,125,]),'DOT':([13,14,25,32,],[19,-9,-8,19,]),'USE':([18,],[24,]),'RIGHT_PAR':([21,22,36,37,38,39,40,61,63,65,66,72,76,77,79,85,86,94,98,99,100,102,105,106,107,108,109,],[29,-17,-16,-18,-19,-20,-21,-38,-40,-42,-43,-34,-29,-32,-35,-39,100,109,-36,-37,-41,-34,-27,-28,-30,-31,-33,]),'COMMA':([21,22,36,37,38,39,40,],[30,-17,-16,-18,-19,-20,-21,]),'COLON':([23,26,],[31,33,]),'BEGIN':([27,28,35,89,],[34,-23,-22,-24,]),'TYPE_INT':([31,33,],[38,38,]),'TYPE_FLOAT':([31,33,],[39,39,]),'TYPE_BOOL':([31,33,],[40,40,]),'IF':([34,44,45,46,47,48,50,53,59,67,68,69,82,95,97,112,116,120,121,124,125,126,],[49,49,-45,-46,-47,-48,-56,49,-44,-57,-58,49,49,-49,49,-59,49,123,49,49,-50,49,]),'LOOP':([34,44,45,46,47,48,50,51,52,53,59,61,63,65,66,67,68,69,71,76,77,79,82,85,87,95,97,98,99,100,102,105,106,107,108,109,112,116,119,121,124,125,126,],[53,53,-45,-46,-47,-48,-56,53,53,53,-44,-38,-40,-42,-43,-57,-58,53,-61,-29,-32,-35,53,-39,101,-49,53,-36,-37,-41,-34,-27,-28,-30,-31,-33,-59,53,-60,53,53,-50,53,]),'FOR':([34,44,45,46,47,48,50,53,59,67,68,69,82,95,97,112,116,121,124,125,126,],[54,54,-45,-46,-47,-48,-56,54,-44,-57,-58,54,54,-49,54,-59,54,54,54,-50,54,]),'WHILE':([34,44,45,46,47,48,50,53,59,67,68,69,82,95,97,112,116,121,124,125,126,],[55,55,-45,-46,-47,-48,-56,55,-44,-57,-58,55,55,-49,55,-59,55,55,55,-50,55,]),'ASSIGN':([38,39,40,42,43,],[-19,-20,-21,56,57,]),'END':([44,45,46,47,48,50,59,67,68,69,95,97,110,111,112,114,115,117,121,125,126,],[58,-45,-46,-47,-48,-56,-44,-57,-58,87,-49,-1,-1,-52,-59,120,-51,-55,-54,-50,-53,]),'ELSE':([45,46,47,48,50,59,67,68,95,97,110,111,112,115,125,126,],[-45,-46,-47,-48,-56,-44,-57,-58,-49,-1,116,-52,-59,-51,-50,-53,]),'ELSIF':([45,46,47,48,50,59,67,68,95,97,110,111,112,115,125,126,],[-45,-46,-47,-48,-56,-44,-57,-58,-49,-1,118,-52,-59,-51,-50,-53,]),'NOT':([49,55,56,57,64,78,83,84,118,],[62,62,62,62,62,62,62,62,62,]),'BOOL_VAL':([49,55,56,57,62,64,78,83,84,118,],[65,65,65,65,65,65,65,65,65,65,]),'NUMBER':([56,57,78,88,90,91,92,93,104,113,],[79,79,79,79,79,79,79,79,79,79,]),'THEN':([60,61,63,65,66,85,98,99,100,122,],[82,-38,-40,-42,-43,-39,-36,-37,-41,124,]),'AND':([61,63,65,66,72,85,100,],[83,-40,-42,-43,-43,-39,-41,]),'OR':([61,63,65,66,72,85,100,],[84,-40,-42,-43,-43,-39,-41,]),'IN':([70,],[88,]),'MUL':([72,76,77,79,102,105,106,107,108,109,],[-34,92,-32,-35,-34,92,92,-30,-31,-33,]),'DIV':([72,76,77,79,102,105,106,107,108,109,],[-34,93,-32,-35,-34,93,93,-30,-31,-33,]),'PLUS':([72,74,76,77,79,94,102,103,105,106,107,108,109,119,],[-34,90,-29,-32,-35,90,-34,90,-27,-28,-30,-31,-33,90,]),'MINUS':([72,74,76,77,79,94,102,103,105,106,107,108,109,119,],[-34,91,-29,-32,-35,91,-34,91,-27,-28,-30,-31,-33,91,]),'DUB_DOT':([76,77,79,102,103,105,106,107,108,109,],[-29,-32,-35,-34,113,-27,-28,-30,-31,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'subprogram':([0,3,],[2,10,]),'headers':([0,],[3,]),'procedure':([0,3,],[4,4,]),'function':([0,3,],[5,5,]),'header':([0,3,],[6,11,]),'pkg':([9,24,],[13,32,]),'args_opt':([12,],[15,]),'empty':([12,97,110,],[17,111,117,]),'args':([16,],[21,]),'arg':([16,30,],[22,36,]),'declarations':([20,],[27,]),'declaration':([20,27,],[28,35,]),'type':([31,33,],[37,42,]),'statements':([34,53,82,116,124,],[44,69,97,121,126,]),'statement':([34,44,53,69,82,97,116,121,124,126,],[45,59,45,59,45,59,45,59,45,59,]),'assign':([34,44,53,69,82,97,116,121,124,126,],[46,46,46,46,46,46,46,46,46,46,]),'if':([34,44,53,69,82,97,116,121,124,126,],[47,47,47,47,47,47,47,47,47,47,]),'loop':([34,44,53,69,82,97,116,121,124,126,],[48,48,48,48,48,48,48,48,48,48,]),'loop_body':([34,44,51,52,53,69,82,97,116,121,124,126,],[50,50,67,68,50,50,50,50,50,50,50,50,]),'for_range':([34,44,53,69,82,97,116,121,124,126,],[51,51,51,51,51,51,51,51,51,51,]),'while':([34,44,53,69,82,97,116,121,124,126,],[52,52,52,52,52,52,52,52,52,52,]),'bool_expr':([49,55,56,57,64,78,118,],[60,71,75,75,86,86,122,]),'bool_term':([49,55,56,57,64,78,83,84,118,],[61,61,61,61,61,61,98,99,61,]),'bool':([49,55,56,57,62,64,78,83,84,118,],[63,63,63,63,85,63,63,63,63,63,]),'value':([56,57,],[73,80,]),'expr':([56,57,78,88,104,113,],[74,74,94,103,94,119,]),'term':([56,57,78,88,90,91,104,113,],[76,76,76,76,105,106,76,76,]),'factor':([56,57,78,88,90,91,92,93,104,113,],[77,77,77,77,77,77,107,108,77,77,]),'elsifs':([97,],[110,]),'else':([110,],[114,]),'elsif':([110,],[115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',7),
  ('prog -> subprogram','prog',1,'p_prog','parser.py',12),
  ('prog -> headers subprogram','prog',2,'p_prog','parser.py',13),
  ('headers -> headers header','headers',2,'p_headers','parser.py',20),
  ('headers -> header','headers',1,'p_headers','parser.py',21),
  ('header -> WITH pkg SEMICOLON','header',3,'p_header','parser.py',28),
  ('header -> WITH pkg SEMICOLON USE pkg SEMICOLON','header',6,'p_header','parser.py',29),
  ('pkg -> pkg DOT IDENT','pkg',3,'p_pkg','parser.py',43),
  ('pkg -> IDENT','pkg',1,'p_pkg','parser.py',44),
  ('subprogram -> procedure','subprogram',1,'p_subprogram','parser.py',56),
  ('subprogram -> function','subprogram',1,'p_subprogram','parser.py',57),
  ('function -> IDENT','function',1,'p_function','parser.py',61),
  ('procedure -> PROC IDENT args_opt IS declarations BEGIN statements END IDENT SEMICOLON','procedure',10,'p_procedure','parser.py',66),
  ('args_opt -> LEFT_PAR args RIGHT_PAR','args_opt',3,'p_args_opt','parser.py',78),
  ('args_opt -> empty','args_opt',1,'p_args_opt','parser.py',79),
  ('args -> args COMMA arg','args',3,'p_args','parser.py',87),
  ('args -> arg','args',1,'p_args','parser.py',88),
  ('arg -> IDENT COLON type','arg',3,'p_arg','parser.py',95),
  ('type -> TYPE_INT','type',1,'p_type','parser.py',99),
  ('type -> TYPE_FLOAT','type',1,'p_type','parser.py',100),
  ('type -> TYPE_BOOL','type',1,'p_type','parser.py',101),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',110),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',111),
  ('declaration -> IDENT COLON type ASSIGN value SEMICOLON','declaration',6,'p_declaration','parser.py',118),
  ('value -> expr','value',1,'p_value','parser.py',125),
  ('value -> bool_expr','value',1,'p_value','parser.py',126),
  ('expr -> expr PLUS term','expr',3,'p_expr','parser.py',130),
  ('expr -> expr MINUS term','expr',3,'p_expr','parser.py',131),
  ('expr -> term','expr',1,'p_expr','parser.py',132),
  ('term -> term MUL factor','term',3,'p_term','parser.py',141),
  ('term -> term DIV factor','term',3,'p_term','parser.py',142),
  ('term -> factor','term',1,'p_term','parser.py',143),
  ('factor -> LEFT_PAR expr RIGHT_PAR','factor',3,'p_factor','parser.py',152),
  ('factor -> IDENT','factor',1,'p_factor','parser.py',153),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',154),
  ('bool_expr -> bool_term AND bool_term','bool_expr',3,'p_bool_expr','parser.py',164),
  ('bool_expr -> bool_term OR bool_term','bool_expr',3,'p_bool_expr','parser.py',165),
  ('bool_expr -> bool_term','bool_expr',1,'p_bool_expr','parser.py',166),
  ('bool_term -> NOT bool','bool_term',2,'p_bool_term','parser.py',173),
  ('bool_term -> bool','bool_term',1,'p_bool_term','parser.py',174),
  ('bool -> LEFT_PAR bool_expr RIGHT_PAR','bool',3,'p_bool','parser.py',181),
  ('bool -> BOOL_VAL','bool',1,'p_bool','parser.py',182),
  ('bool -> IDENT','bool',1,'p_bool','parser.py',183),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',193),
  ('statements -> statement','statements',1,'p_statements','parser.py',194),
  ('statement -> assign','statement',1,'p_statement','parser.py',202),
  ('statement -> if','statement',1,'p_statement','parser.py',203),
  ('statement -> loop','statement',1,'p_statement','parser.py',204),
  ('assign -> IDENT ASSIGN value SEMICOLON','assign',4,'p_assign','parser.py',208),
  ('if -> IF bool_expr THEN statements elsifs else END IF SEMICOLON','if',9,'p_if','parser.py',214),
  ('elsifs -> elsifs elsif','elsifs',2,'p_elsifs','parser.py',222),
  ('elsifs -> empty','elsifs',1,'p_elsifs','parser.py',223),
  ('elsif -> ELSIF bool_expr THEN statements','elsif',4,'p_elsif','parser.py',230),
  ('else -> ELSE statements','else',2,'p_else','parser.py',236),
  ('else -> empty','else',1,'p_else','parser.py',237),
  ('loop -> loop_body','loop',1,'p_loop','parser.py',244),
  ('loop -> for_range loop_body','loop',2,'p_loop','parser.py',245),
  ('loop -> while loop_body','loop',2,'p_loop','parser.py',246),
  ('loop_body -> LOOP statements END LOOP SEMICOLON','loop_body',5,'p_loop_body','parser.py',253),
  ('for_range -> FOR IDENT IN expr DUB_DOT expr','for_range',6,'p_for_range','parser.py',260),
  ('while -> WHILE bool_expr','while',2,'p_while','parser.py',267),
]
